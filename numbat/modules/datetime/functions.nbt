use core::strings
use units::si

@description("Returns the current date and time.")
fn now() -> DateTime

@description("Parses a string (date and time) into a `DateTime` object. See [here](./date-and-time.md#date-time-formats) for an overview of the supported formats.")
fn datetime(input: String) -> DateTime

@description("Formats a `DateTime` object as a string.")
fn format_datetime(format: String, input: DateTime) -> String

@description("Returns the users local timezone.")
fn get_local_timezone() -> String

@description("Returns a timezone conversion function, typically used with the conversion operator.")
fn tz(tz: String) -> Fn[(DateTime) -> DateTime]

@description("Timezone conversion function targeting the users local timezone (`datetime -> local`).")
let local: Fn[(DateTime) -> DateTime] = tz(get_local_timezone())

@description("Timezone conversion function to UTC.")
let UTC: Fn[(DateTime) -> DateTime] = tz("UTC")

@description("Converts a `DateTime` to a UNIX timestamp. Can be used on the right hand side of a conversion operator: `now() -> unixtime`.")
fn unixtime(input: DateTime) -> Scalar

@description("Converts a UNIX timestamp to a `DateTime` object.")
fn from_unixtime(input: Scalar) -> DateTime

fn _today_str() = format_datetime("%Y-%m-%d", now())

@description("Returns the current date at midnight (in the local time).")
fn today() -> DateTime = datetime("{_today_str()} 00:00:00")

@description("Parses a string (only date) into a `DateTime` object.")
fn date(input: String) -> DateTime =
  if str_contains(input, " ")
    then datetime(str_replace(input, " ", " 00:00:00 "))
    else datetime("{input} 00:00:00")

@description("Parses a string (time only) into a `DateTime` object.")
fn time(input: String) -> DateTime =
  datetime("{_today_str()} {input}")

@name("Julian date")
@description("Convert a `DateTime` to a Julian date, the number of days since the origin of the Julian date system (noon on November 24, 4714 BC in the propleptic Gregorian calendar).")
@url("https://en.wikipedia.org/wiki/Julian_day")
fn julian_date(dt: DateTime) -> Time =
  (dt - datetime("-4713-11-24 12:00:00 +0000")) -> days
