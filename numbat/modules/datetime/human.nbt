use core::functions
use core::strings
use units::si
use units::time
use datetime::functions

fn _human_join(a: String, b: String) -> String =
  if a == "" then b else if b == "" then a else "{a} + {b}"

fn _prettier(str: String) -> String =
  if str_slice(str, 0, 2) == "0 " then ""
  else if str_slice(str, 0, 2) == "1 " then str_slice(str, 0, str_length(str) - 1)
  else str

fn _human_years(time: Time)   -> String = "{(time -> years)   /  year   // floor} years"   -> _prettier
fn _human_months(time: Time)  -> String = "{(time -> months)  /  month  // floor} months"  -> _prettier
fn _human_days(time: Time)    -> String = "{(time -> days)    /  day    // floor} days"    -> _prettier
fn _human_hours(time: Time)   -> String = "{(time -> hours)   /  hour   // floor} hours"   -> _prettier
fn _human_minutes(time: Time) -> String = "{(time -> minutes) /  minute // floor} minutes" -> _prettier
fn _human_seconds(time: Time) -> String = str_replace("{(time -> seconds) /  second} seconds", ".0 ", " ") -> _prettier

fn _human_recurse(t: Time, result: String, time_unit: String) -> String =
  if time_unit == "year"
    then _human_recurse(t - (t -> year  // floor) -> ms // round, _human_join(result, t -> _human_years),   "month")
  else if time_unit == "month"
    then _human_recurse(t - (t -> month // floor) -> ms // round, _human_join(result, t -> _human_months),  "day")
  else if time_unit == "day"
    then _human_recurse(t - (t -> day   // floor) -> ms // round, _human_join(result, t -> _human_days),    "hour")
  else if time_unit == "hour"
    then _human_recurse(t - (t -> hour  // floor) -> ms // round, _human_join(result, t -> _human_hours),   "minute")
  else if time_unit == "minute"
    then _human_recurse(t - (t -> min   // floor) -> ms // round, _human_join(result, t -> _human_minutes), "second")
  else _human_join(result, (t -> ms // round) -> _human_seconds)

fn _human_manage_past(str: String, time: Time) = str_append(str, if time < 0 s then " ago" else "")

fn _human_with_biggest_unit(time: Time, biggest_unit: String) -> String =
  _human_manage_past(_human_recurse(abs(time), "", biggest_unit), time)

fn _human_for_long_duration(human_days: String, human_years: String) -> String =
  "{human_days} (approx. {human_years})"

@name("Human-readable time duration")
@url("https://numbat.dev/doc/date-and-time.html")
@description("Converts a time duration to a human-readable string in days, hours, minutes and seconds.")
fn human(time: Time) -> String =
  if time == 0 s then "0 seconds"
  else if abs(time) < 60 seconds then _human_manage_past(abs(time) -> _human_seconds, time)
  else if abs(time) < 2 months then _human_with_biggest_unit(time,  "day")
  else _human_for_long_duration(_human_with_biggest_unit(time, "day"), _human_with_biggest_unit(time, "year"))
