use core::scalar

fn len<A>(xs: List<A>) -> Scalar
fn head<A>(xs: List<A>) -> A
fn tail<A>(xs: List<A>) -> List<A>
fn cons<A>(x: A, xs: List<A>) -> List<A>

fn is_empty<A>(xs: List<A>) -> Bool = xs == []

fn generate<A>(n: Scalar, f: Fn[() -> A]) -> List<A> =
  if n == 0
    then []
    else cons(f(), generate(n - 1, f))

fn map<A, B>(f: Fn[(A) -> B], xs: List<A>) -> List<B> =
  if is_empty(xs)
    then []
    else cons(f(head(xs)), map(f, tail(xs)))

fn cons_end<A>(xs: List<A>, x: A) -> List<A> =
  if is_empty(xs)
    then [x]
    else cons(head(xs), cons_end(tail(xs), x))

fn reverse<A>(xs: List<A>) -> List<A> =
  if is_empty(xs)
    then []
    else cons_end(reverse(tail(xs)), head(xs))

fn sequence(n: Scalar) -> List<Scalar> =
  if n == 0
    then []
    else cons_end(sequence(n - 1), n - 1)

fn foldl<A, B>(f: Fn[(A, B) -> A], acc: A, xs: List<B>) -> A =
  if is_empty(xs)
    then acc
    else foldl(f, f(acc, head(xs)), tail(xs))

fn add(x, y) = x + y # TODO
fn sum<A>(xs: List<A>) -> A = foldl(add, 0, xs)
