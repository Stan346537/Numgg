use core::quantities
use core::strings
use core::lists

struct _PlotData {
  x_label: String,
  y_label: String,
  xs: List<Scalar>,
  ys: List<Scalar>,
}

fn _create_line_plot(data: _PlotData) -> String

fn _unit_name<A: Dim>(x: A) -> String = str_replace("{unit_of(x)}", "1 ", "")

let _num_points_for_line_plot = 800

fn _is_scalar<A: Dim>(x: A) -> Bool = "{unit_of(x)}" == "1"

fn plot<A: Dim, B: Dim>(f: Fn[(A) -> B], x_start: A, x_end: A, x_label: String, y_label: String) -> String =
  _create_line_plot(_PlotData {
    x_label: if _is_scalar(x_end) then x_label else "{x_label} [{_unit_name(x_end)}]",
    y_label: if _is_scalar(f(x_end)) then y_label else "{y_label} [{_unit_name(f(x_end))}]",
    xs: linspace(x_start / unit_of(x_start), x_end / unit_of(x_end), _num_points_for_line_plot),
    ys: map(value_of, map(f, linspace(x_start, x_end, _num_points_for_line_plot))),
  })
