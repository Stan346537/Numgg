use core::scalar
use core::lists
use math::constants

## Basics

@name("Square root")
@url("https://en.wikipedia.org/wiki/Square_root")
fn sqrt<D: Dim>(x: D^2) -> D = x^(1/2)

@name("Square function")
fn sqr<D: Dim>(x: D) -> D^2 = x^2

## Exponential and logarithm

@name("Exponential function")
@url("https://en.wikipedia.org/wiki/Exponential_function")
fn exp(x: Scalar) -> Scalar

@name("Natural logarithm")
@url("https://en.wikipedia.org/wiki/Natural_logarithm")
fn ln(x: Scalar) -> Scalar

@name("Natural logarithm")
@url("https://en.wikipedia.org/wiki/Natural_logarithm")
fn log(x: Scalar) -> Scalar = ln(x)

@name("Common logarithm")
@url("https://en.wikipedia.org/wiki/Common_logarithm")
fn log10(x: Scalar) -> Scalar

@name("Binary logarithm")
@url("https://en.wikipedia.org/wiki/Binary_logarithm")
fn log2(x: Scalar) -> Scalar

## Trigonometry

@name("Sine")
@url("https://en.wikipedia.org/wiki/Trigonometric_functions")
fn sin(x: Scalar) -> Scalar

@name("Cosine")
@url("https://en.wikipedia.org/wiki/Trigonometric_functions")
fn cos(x: Scalar) -> Scalar

@name("Tangent")
@url("https://en.wikipedia.org/wiki/Trigonometric_functions")
fn tan(x: Scalar) -> Scalar

@name("Arc sine")
@url("https://en.wikipedia.org/wiki/Inverse_trigonometric_functions")
fn asin(x: Scalar) -> Scalar

@name("Arc cosine")
@url("https://en.wikipedia.org/wiki/Inverse_trigonometric_functions")
fn acos(x: Scalar) -> Scalar

@name("Arc tangent")
@url("https://en.wikipedia.org/wiki/Inverse_trigonometric_functions")
fn atan(x: Scalar) -> Scalar

@url("https://en.wikipedia.org/wiki/Atan2")
fn atan2<T: Dim>(y: T, x: T) -> Scalar

@name("Hyperbolic sine")
@url("https://en.wikipedia.org/wiki/Hyperbolic_functions")
fn sinh(x: Scalar) -> Scalar

@name("Hyperbolic cosine")
@url("https://en.wikipedia.org/wiki/Hyperbolic_functions")
fn cosh(x: Scalar) -> Scalar

@name("Hyperbolic tangent")
@url("https://en.wikipedia.org/wiki/Hyperbolic_functions")
fn tanh(x: Scalar) -> Scalar

@name("Area hyperbolic sine")
@url("https://en.wikipedia.org/wiki/Hyperbolic_functions")
fn asinh(x: Scalar) -> Scalar

@name("Area hyperbolic cosine")
@url("https://en.wikipedia.org/wiki/Hyperbolic_functions")
fn acosh(x: Scalar) -> Scalar

@name("Area hyperbolic tangent ")
@url("https://en.wikipedia.org/wiki/Hyperbolic_functions")
fn atanh(x: Scalar) -> Scalar

# Note: there are even more functions in `math::trigonmetry_extra`.

## Others


@name("Gamma function")
@url("https://en.wikipedia.org/wiki/Gamma_function")
fn gamma(x: Scalar) -> Scalar

### Statistics

# TODO: remove these helpers once we support local definitions
fn _max<D: Dim>(x: D, y: D) -> D = if x > y then x else y
fn _min<D: Dim>(x: D, y: D) -> D = if x < y then x else y

@name("Maxmimum")
@description("Get the largest element of a list")
fn maximum<D: Dim>(xs: List<D>) -> D =
  if len(xs) == 1
    then head(xs)
    else _max(head(xs), maximum(tail(xs)))

@name("Minimum")
@description("Get the smallest element of a list")
fn minimum<D: Dim>(xs: List<D>) -> D =
  if len(xs) == 1
    then head(xs)
    else _min(head(xs), minimum(tail(xs)))

@name("Arithmetic mean")
@url("https://en.wikipedia.org/wiki/Arithmetic_mean")
fn mean<D: Dim>(xs: List<D>) -> D = if is_empty(xs) then 0 else sum(xs) / len(xs)

@name("Variance")
@url("https://en.wikipedia.org/wiki/Variance")
@description("Calculate the population variance of a list of quantities")
fn variance<D: Dim>(xs: List<D>) -> D^2 =
  mean(map(sqr, xs)) - sqr(mean(xs))

@name("Standard deviation")
@url("https://en.wikipedia.org/wiki/Standard_deviation")
@description("Calculate the population standard deviation of a list of quantities")
fn stdev<D: Dim>(xs: List<D>) -> D = sqrt(variance(xs))

@name("Median")
@url("https://en.wikipedia.org/wiki/Median")
@description("Calculate the median of a list of quantities")
fn median<D: Dim>(xs: List<D>) -> D =  # TODO: this is extremely inefficient
  if mod(len(xs), 2) == 1
    then element_at((len(xs) - 1) / 2, sort(xs))
    else mean([element_at(len(xs) / 2 - 1, sort(xs)), element_at(len(xs) / 2, sort(xs))])


### Geometry

fn hypot2<T: Dim>(x: T, y: T) -> T = sqrt(x^2 + y^2)
fn hypot3<T: Dim>(x: T, y: T, z: T) -> T = sqrt(x^2 + y^2 + z^2)

# The following functions use a generic dimension instead of
# 'Length' in order to allow for computations in pixels, for
# example

fn circle_area<L: Dim>(radius: L) -> L^2 = π × radius^2
fn circle_circumference<L: Dim>(radius: L) -> L = 2 π × radius
fn sphere_area<L: Dim>(radius: L) -> L^2 = 4 π × radius^2
fn sphere_volume<L: Dim>(radius: L) -> L^3 = 4/3 × π × radius^3
