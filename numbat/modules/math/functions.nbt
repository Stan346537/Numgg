use core::scalar
use math::constants

## Basics

fn sqrt<D>(x: D^2) -> D = x^(1/2)
fn sqr<D>(x: D) -> D^2 = x^2

## Exponential and logarithm

fn exp(x: Scalar) -> Scalar
fn ln(x: Scalar) -> Scalar
fn log(x: Scalar) -> Scalar = ln(x)
fn log10(x: Scalar) -> Scalar
fn log2(x: Scalar) -> Scalar

## Trigonometry

fn sin(x: Scalar) -> Scalar
fn cos(x: Scalar) -> Scalar
fn tan(x: Scalar) -> Scalar
fn asin(x: Scalar) -> Scalar
fn acos(x: Scalar) -> Scalar
fn atan(x: Scalar) -> Scalar
fn atan2<T>(y: T, x: T) -> Scalar

fn sinh(x: Scalar) -> Scalar
fn cosh(x: Scalar) -> Scalar
fn tanh(x: Scalar) -> Scalar
fn asinh(x: Scalar) -> Scalar
fn acosh(x: Scalar) -> Scalar
fn atanh(x: Scalar) -> Scalar

# Note: there are even more functions in `math::trigonmetry_extra`.

## Others

fn gamma(x: Scalar) -> Scalar

### Statistics

fn mean<D>(xs: D…) -> D
fn maximum<D>(xs: D…) -> D
fn minimum<D>(xs: D…) -> D

### Geometry

fn hypot2<T>(x: T, y: T) -> T = sqrt(x^2 + y^2)
fn hypot3<T>(x: T, y: T, z: T) -> T = sqrt(x^2 + y^2 + z^2)

# The following functions use a generic dimension instead of
# 'Length' in order to allow for computations in pixels, for
# example

fn circle_area<L>(radius: L) -> L^2 = π × radius^2
fn circle_circumference<L>(radius: L) -> L = 2 π × radius
fn sphere_area<L>(radius: L) -> L^2 = 4 π × radius^2
fn sphere_volume<L>(radius: L) -> L^3 = 4/3 × π × radius^3
